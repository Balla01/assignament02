# -*- coding: utf-8 -*-
"""MODEL_BUILD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KokDAcAiScMmv-ghN6uBZ0OuNCrVbxcR

1) A computer based English language text software

creating the database from the given train folder

-> ensure that train folder is saved in the local pc
"""

import pandas as pd

import os
folder_path=r'/content/drive/MyDrive/data/train'
fileName=os.listdir(folder_path)
data=[]
for i in fileName:
  text=os.path.abspath(os.path.join(folder_path,i))
  fileName01=os.listdir(text)
  for j in fileName01:
    text01=os.path.abspath(os.path.join(text,j))
    abc=open(text01,"r")
    with open(text01,'r') as files:
      try:
        for k in files:
          fgh=[]
          fgh.append(k)
          fgh.append(i)
          data.append(fgh) 
      except:
        p=1

"""preprossing the dataframe"""

count_row = df.shape[0] 
for i in range(0,count_row):
  if df['content'][i]!=None:
    if len(df['content'][i])==1:
      if ord(df['content'][i])==10:
        df=df.drop(axis=0,index=i)

df.isnull().sum()

df

"""model building using NLTK techniques"""

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
nltk.download('punkt')
stop_words = set(stopwords.words("english"))

x = df['content'].values
y = df['lable'].values

# Split the data       
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=0)

from sklearn.feature_extraction.text import CountVectorizer     #feature extraction using count_vectorizer

vect = CountVectorizer(stop_words='english') 
x_train_vect = vect.fit_transform(x_train)
x_test_vect = vect.transform(x_test)

from sklearn.ensemble import ExtraTreesClassifier                             #ExtraTreesClassifier 
clf = ExtraTreesClassifier(n_estimators=1000, random_state=0)
clf.fit(x_train_vect,y_train)
y_pred = clf.predict(x_test_vect)

"""evaluation of model """

from sklearn.metrics import accuracy_score,classification_report
accuracy_score(y_pred,y_test)

print(classification_report(y_pred,y_test))

"""evaluating randolmly choosen 100 topic from test dataset is predicted by the above ExtraTreesClassifier  model"""

import os
import random
folder_path=r'/content/drive/MyDrive/data/test'
data=[]
for i in range(0,100):
  fileName=os.listdir(folder_path)
  item = random.choice(list(fileName))
  text=os.path.abspath(os.path.join(folder_path,item))
  fileName01=os.listdir(text)
  item01 = random.choice(list(fileName01))
  text01=os.path.abspath(os.path.join(text,item01))
  abc=open(text01,"r")
  a=abc.read()
  fgh=[]
  fgh.append(a)
  fgh.append(item)
  test = vect.transform([a])                                       #prediction of the randolmly choosen topic from test dataset is predicted by the above ExtraTreesClassifier  model
  var1=clf.predict(test)[0] 
  fgh.append(var1)  
  data.append(fgh) 

ef = pd.DataFrame(data, columns=['content','lable','prediction'])
ef

"""we got 97% of test accuracy"""

from sklearn.metrics import accuracy_score,classification_report
accuracy_score(ef['lable'],ef['prediction'])

"""After the model is Build

Now the computer based english language test software is developed to assess reading proficiency of the student will be tested on the randmoly chosen two passages from (train+test) dataset 

those passages is generated by the below code

note: we are only accessing the passage from the randomly chosen file , the topic of the chosen passage is predicted by the NLTK model
"""

import os
import random
folder_path02=r'/content/drive/MyDrive/data'
kl=1
lis=[]
while kl<5:
  fileName02=os.listdir(folder_path02)
  item02 = random.choice(list(fileName02))
  folder_path=os.path.abspath(os.path.join(folder_path02,item02))
  fileName=os.listdir(folder_path)
  item = random.choice(list(fileName))
  text=os.path.abspath(os.path.join(folder_path,item))
  fileName01=os.listdir(text)
  item01 = random.choice(list(fileName01))
  text01=os.path.abspath(os.path.join(text,item01))
  abc=open(text01,"r")
  a=abc.read()

  data=[a]
  df = pd.DataFrame(data, columns=['Numbers'])
  var=df['Numbers'][0]
  test = vect.transform([var])
  var1=clf.predict(test)[0]                                                #the randomly choosen text file from (train + test) dataset is predicted by the above ExtraTreesClassifier model 
  lis.append(var1)
  if kl==1:
    print("1) THE TOPIC OF THE PARAGRAPH IS",var1)
    print(a) 
    kl=kl+1 
  else:
    count1 = lis.count(lis[0])
    if count1==1:
      print("-----------------------------------------------------------------------------------------------")
      print("2) THE TOPIC OF THE PARAGRAPH IS",var1)
      print(a)
   
      break
    else:
      lis.pop(-1)
  if len(lis)>=2:
    break

"""we can add new passages once in the month"""

fileName04=input("enter the file name")
abc=open(fileName04,"r")
a=abc.read()
test = vect.transform([a])
var1=clf.predict(test)[0] 
print(var1)
paths=r'/content/drive/MyDrive/data/test'
folder_path=os.path.abspath(os.path.join(paths,var1))
print(folder_path)
if not os.path.exists(fileName04):
  path02 = os.path.join(folder_path,fileName04)
  os.mkdir(path02)





"""2) analysing the given examination data , if the football question has gender bias!"""

import pandas as pd
df=pd.read_csv("/content/student_records.csv")

df.tail()

# Import the necessary modules
import matplotlib.pyplot as plt
import pandas as pd
  
X = list(df.iloc[:, 0])
Y = list(df.iloc[:, -1])

plt.bar(X, Y, color='g')

a=df['Gender'].value_counts()
a

gender_group = df.groupby(['Score_Football_Question', 'Gender']).size().unstack()

gender_group.apply(lambda x:x/x.sum(), axis=1).plot(kind='barh', stacked=True, legend=False)

plt.legend(['Men', 'Women'], bbox_to_anchor=(1.0, 0.7))

plt.xlabel('Men / Women ratio')

"""
By looking into above chart,it is clearly shown that there is no gender bias for answering the foot ball question. Because men as well as women both given correct answer and worng answer for the foot ball question."""